#!/usr/bin/env bash
# q -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|

  aws_data_file = "#{ENV['HOME']}/.vagrant/aws-creds"

  vagrant_user=ENV['VAGRANT_USER'] || 'vagrant'

  # build_docker_image variable is used to enable building
  # of docker image and multithreaded caffe.
  # By default, for development purposes, this value is set to "true"
  # which means that all of required artifacts are going to be built.
  build_docker_image = "true"

  # If vagrant is used to run Integration Tests on Kopernik, then
  # usually we don't have to rebuild all of artifacts due to AMI caching.
  if File.exists?(aws_data_file)
    build_docker_image = "false"
  end

  # Developer can override all of this settings with enviromental variable
  # and force build behavior.
  if ENV["BUILD_CACHED_IMAGE"]
    build_docker_image = ENV['BUILD_CACHED_IMAGE']
  end

  # SSH agent forwarding (for host private keys)
  config.ssh.forward_agent = true
  config.ssh.keys_only = false
  config.ssh.insert_key = false
  config.vm.box = "centos/7"
  config.vm.box_check_update = false

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "10.141.141.10"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  home_dir = vagrant_user == 'root' ? '/root/' : "/home/#{vagrant_user}"
  config.vm.synced_folder "..", "#{home_dir}/go/src/github.com/intelsdi-x/swan", :mount_options => ["umask=0022,dmask=0022,fmask=0022"]
  if File.directory?(File.expand_path("#{ENV['HOME']}/swan_s3_creds"))
       config.vm.synced_folder "#{ENV['HOME']}/swan_s3_creds", "#{home_dir}/swan_s3_creds", :mount_options => ["umask=0022,dmask=0022,fmask=0022"]
  end

  config.vm.provider "virtualbox" do |vb, override|
    vb.gui = false
    vb.name = "swan"

    vb.cpus = (ENV['VBOX_CPUS'] != '' && ENV['VBOX_CPUS'] || 2)       # NOTE: integration tests fail with less than 2
    vb.memory = (ENV['VBOX_MEM'] != '' && ENV['VBOX_MEM'] || 4096)    # NOTE: integration tests tend to crash with less (gcc)

    override.ssh.insert_key = true
    override.ssh.keys_only = true
    if ENV["SHARE_GLIDE_CACHE"] == "true" and File.directory?(File.expand_path("#{ENV['HOME']}/.glide"))
      override.vm.synced_folder "#{ENV['HOME']}/.glide", "#{home_dir}/.glide", :mount_options => ["umask=0022,dmask=0022,fmask=0022"]
    end
  end

  config.vm.provider :aws do |aws, override|
    require 'yaml'
    # load a file at this location that can be used to set aws specific
    # information. This allows you to set your own credentials, but also
    # custom what ami the job runs on.
    if File.exists?(aws_data_file)
      data = YAML.load_file(aws_data_file)
    else
      data = {}
    end
    override.nfs.functional = false
    aws.access_key_id = data['access_key_id']
    aws.secret_access_key = data['secret_access_key']
    aws.block_device_mapping = [{'DeviceName' => '/dev/sda1',
                                 'Ebs.Iops' => 1000,
                                 'Ebs.VolumeSize' => 40,
                                 'Ebs.VolumeType' => 'io1',
                                 'Ebs.DeleteOnTermination' => true }]

    override.vm.box = "aws"
    # requiretty cannot be set in sudoers for vagrant to work
    aws.user_data = "#!/bin/bash\nsed -i 's/Defaults    requiretty/#Defaults    requiretty/' /etc/sudoers"
    # centos7 for us-east
    # COPY AMI ID HERE
    # non-cached ami: ami-6d1c2007
    aws.ami = "ami-0125d417"
    aws.instance_package_timeout = 60000
    aws.instance_type = "m4.large"
    aws.keypair_name = "snapbot-private"
    override.ssh.username = data['ssh_username'] || "centos"
  end

  config.vm.provision "shell", path: "resources/scripts/setup_env.sh", env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
  config.vm.provision "shell", path: "resources/scripts/copy_configuration.sh", env: {'HOME_DIR' => home_dir}
  config.vm.provision "shell", path: "resources/scripts/install_packages.sh", env: {'HOME_DIR' => home_dir}
  config.vm.provision "shell", path: "resources/scripts/setup_git.sh", env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
  config.vm.provision "shell", path: "resources/scripts/setup_public_keys.sh", env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
  config.vm.provision "shell", path: "resources/scripts/setup_services.sh", env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
  config.vm.provision "shell", path: "resources/scripts/install_golang.sh", env: {'HOME_DIR' => home_dir}
  config.vm.provision "shell", path: "resources/scripts/install_snap.sh", env: {'HOME_DIR' => home_dir}
  config.vm.provision "shell", path: "resources/scripts/install_kubernetes.sh", env: {'HOME_DIR' => home_dir}
  config.vm.provision "shell", path: "resources/scripts/post_install.sh", env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
  config.vm.provision "shell", path: "resources/scripts/install_project_deps.sh", env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir, 'BUILD_DOCKER_IMAGE' => build_docker_image}
  config.vm.provision "shell", path: "resources/scripts/checker.sh", env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
end
