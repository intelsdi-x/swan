// Copyright (c) 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mocks

import (
	"time"

	"github.com/intelsdi-x/swan/pkg/executor"
	"github.com/stretchr/testify/mock"
)

// LoadGenerator is an autogenerated mock type for the LoadGenerator type
type LoadGenerator struct {
	mock.Mock
}

// Load provides a mock function with given fields: load, duration
func (_m *LoadGenerator) Load(load int, duration time.Duration) (executor.TaskHandle, error) {
	ret := _m.Called(load, duration)

	var r0 executor.TaskHandle
	if rf, ok := ret.Get(0).(func(int, time.Duration) executor.TaskHandle); ok {
		r0 = rf(load, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(executor.TaskHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, time.Duration) error); ok {
		r1 = rf(load, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Populate provides a mock function with given fields:
func (_m *LoadGenerator) Populate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tune provides a mock function with given fields: slo
func (_m *LoadGenerator) Tune(slo int) (int, int, error) {
	ret := _m.Called(slo)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(slo)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(slo)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(slo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
