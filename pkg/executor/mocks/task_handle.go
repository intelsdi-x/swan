package mocks

import (
	"os"
	"time"

	"github.com/intelsdi-x/swan/pkg/executor"
	"github.com/stretchr/testify/mock"
)

// TaskHandle is an autogenerated mock type for the TaskHandle type
type TaskHandle struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *TaskHandle) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Address provides a mock function with given fields:
func (_m *TaskHandle) Address() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Clean provides a mock function with given fields:
func (_m *TaskHandle) Clean() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EraseOutput provides a mock function with given fields:
func (_m *TaskHandle) EraseOutput() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExitCode provides a mock function with given fields:
func (_m *TaskHandle) ExitCode() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields:
func (_m *TaskHandle) Status() executor.TaskState {
	ret := _m.Called()

	var r0 executor.TaskState
	if rf, ok := ret.Get(0).(func() executor.TaskState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(executor.TaskState)
	}

	return r0
}

// StderrFile provides a mock function with given fields:
func (_m *TaskHandle) StderrFile() (*os.File, error) {
	ret := _m.Called()

	var r0 *os.File
	if rf, ok := ret.Get(0).(func() *os.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StdoutFile provides a mock function with given fields:
func (_m *TaskHandle) StdoutFile() (*os.File, error) {
	ret := _m.Called()

	var r0 *os.File
	if rf, ok := ret.Get(0).(func() *os.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *TaskHandle) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wait provides a mock function with given fields: timeout
func (_m *TaskHandle) Wait(timeout time.Duration) bool {
	ret := _m.Called(timeout)

	var r0 bool
	if rf, ok := ret.Get(0).(func(time.Duration) bool); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
