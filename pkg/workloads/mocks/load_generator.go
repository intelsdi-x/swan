package mocks

import "github.com/stretchr/testify/mock"

import "time"

// LoadGenerator is an autogenerated mock type for the LoadGenerator type
type LoadGenerator struct {
	mock.Mock
}

// Load provides a mock function with given fields: load, duration
func (_m *LoadGenerator) Load(load int, duration time.Duration) (int, int, error) {
	ret := _m.Called(load, duration)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, time.Duration) int); ok {
		r0 = rf(load, duration)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, time.Duration) int); ok {
		r1 = rf(load, duration)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, time.Duration) error); ok {
		r2 = rf(load, duration)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Populate provides a mock function with given fields:
func (_m *LoadGenerator) Populate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tune provides a mock function with given fields: slo
func (_m *LoadGenerator) Tune(slo int) (int, int, error) {
	ret := _m.Called(slo)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(slo)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(slo)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(slo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
