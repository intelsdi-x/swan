From: Pawel Palucki <pawel.palucki@intel.com>
Date: Thu, 13 Oct 2016 14:08:52 +0200
Subject: [PATCH]memcached affinity patch 

* memcached affinity patch
* optional flag for memcached affinity
---
 memcached.c         |  6 +++
 memcached.h         |  1 +
 thread.c            | 35 +++++++++++++
 5 files changed, 82 insertions(+), 30 deletions(-)

diff --git a/memcached.c b/memcached.c
index ff1af50..b31dbeb 100644
--- a/memcached.c
+++ b/memcached.c
@@ -227,6 +227,7 @@ static void settings_init(void) {
     settings.chunk_size = 48;         /* space for a modest key and value */
     settings.num_threads = 4;         /* N workers */
     settings.num_threads_per_udp = 0;
+	settings.thread_affinity = false;
     settings.prefix_delimiter = ':';
     settings.detail_enabled = 0;
     settings.reqs_per_event = 20;
@@ -4854,6 +4855,7 @@ static void usage(void) {
            "              is turned on automatically; if not, then it may be turned on\n"
            "              by sending the \"stats detail on\" command to the server.\n");
     printf("-t <num>      number of threads to use (default: 4)\n");
+	printf("-T            set distinct cpu affinity for threads, round-robin\n");
     printf("-R            Maximum number of requests per event, limits the number of\n"
            "              requests process for a given connection to prevent \n"
            "              starvation (default: 20)\n");
@@ -5196,6 +5198,7 @@ int main (int argc, char **argv) {
           "f:"  /* factor? */
           "n:"  /* minimum space allocated for key+value+flags */
           "t:"  /* threads */
+          "T"   /* thread-cpu affinity */
           "D:"  /* prefix delimiter? */
           "L"   /* Large memory pages */
           "R:"  /* max requests per event */
@@ -5321,6 +5324,9 @@ int main (int argc, char **argv) {
                                 " your machine or less.\n");
             }
             break;
+        case 'T':
+            settings.thread_affinity = true;
+            break;
         case 'D':
             if (! optarg || ! optarg[0]) {
                 fprintf(stderr, "No delimiter specified\n");
diff --git a/memcached.h b/memcached.h
index df972f5..658e6b6 100644
--- a/memcached.h
+++ b/memcached.h
@@ -335,6 +335,7 @@ struct settings {
     int slab_automove;     /* Whether or not to automatically move slabs */
     int hashpower_init;     /* Starting hash power level */
     bool shutdown_command; /* allow shutdown command */
+		bool thread_affinity;
     int tail_repair_time;   /* LRU tail refcount leak repair time */
     bool flush_enabled;     /* flush_all enabled */
     char *hash_algorithm;     /* Hash algorithm in use */
diff --git a/thread.c b/thread.c
index 7c56445..a1afb81 100644
--- a/thread.c
+++ b/thread.c
@@ -9,6 +9,8 @@
 #include <stdlib.h>
 #include <string.h>
 #include <pthread.h>
+#include <sched.h>
+
 
 #ifdef __sun
 #include <atomic.h>
@@ -305,6 +307,39 @@ static void create_worker(void *(*func)(void *), void *arg) {
 
     pthread_attr_init(&attr);
 
+	/* AFFINITY: based on leverich: https://github.com/leverich/memcached-affinity/commit/afc17b76ddcef7276c6a777bd79a062c4afdbac4 */
+	if (settings.thread_affinity) {
+
+		static int current_cpu = -1;
+		static int max_cpus = 8 * sizeof(cpu_set_t);
+		cpu_set_t m;
+		int i=0;
+
+		CPU_ZERO(&m);
+		sched_getaffinity(0, sizeof(cpu_set_t), &m);
+
+		for (i = 0; i < max_cpus; i++) {
+			
+			int c = (current_cpu + i + 1) % max_cpus;
+			if (CPU_ISSET(c, &m)) {
+				CPU_ZERO(&m);
+				CPU_SET(c, &m);
+				if ((ret = pthread_attr_setaffinity_np(&attr, sizeof(cpu_set_t), &m)) != 0) {
+					fprintf(stderr, "Can't set thread affinity: %s\n",
+							strerror(ret));
+					exit(1);
+				}
+				
+				if (settings.verbose > 0) {
+					fprintf(stderr, "Created thread with affinity = %d\n", c);
+				}
+				
+				current_cpu = c;
+				break;
+			}
+		}
+	}
+
     if ((ret = pthread_create(&((LIBEVENT_THREAD*)arg)->thread_id, &attr, func, arg)) != 0) {
         fprintf(stderr, "Can't create thread: %s\n",
                 strerror(ret));
